[ MVC_Board 프로젝트 패키지 구조 ]
action : Action 클래스 위치(= Controller 역할)
controller : FrontController 클래스 위치(= 초기 진입점)
dao : 비즈니스 로직 처리 역할을 수행하는 DAO 클래스 위치
db : DB 연결 작업 등을 수행하는 JdbcUtil 클래스 위치
svc : Service 클래스 위치(DB 작업 처리 결과 판별 및 트랜잭션 처리 담당)
vo : 데이터 저장 역할을 수행할 XXXBean 클래스(= XXXDTO = XXXVO) 위치
=============================================================================

[ MVC_Board 프로젝트 기본 흐름 ]
----------------------------------- 요청 방향 --------------------------------->
서블릿 요청 -> FrontController -> Action 클래스 -> Service 클래스 -> DAO 클래스
<---------------------------------- 응답 방향 ----------------------------------

< 글쓰기 동작 흐름 >
1. 서블릿 주소 "/BoardWriteForm.bo" 요청 시
   BoardFrontController 에 의해 "/board/board_write_form.jsp" 페이지로 이동
   (Dispatch 방식으로 포워딩 = "/BoardWriteForm.bo" 주소가 유지됨)
2. board_write_form.jsp 페이지에서 글쓰기 폼 출력 후 내용 입력받은 후
   글쓰기 버튼 클릭 시 글쓰기 작업 요청을 위한 서블릿 주소"BoardWritePro.bo" 요청
   (이 때, 파일 업로드 기능을 위해 form 태그에 enctype="multipart/form-data" 속성 추가)
3. 서블릿 주소 "/BoardWritePro.bo" 요청 시 비즈니스 로직 처리를 위해
   BoardFrontController 에 의해 Action(BoardWriteProAction) 클래스 인스턴스 생성 후
   execute() 메서드를 호출
4. BoardWriteProAction 객체의 execute() 메서드에서 글쓰기를 위한 데이터 준비 작업 후
   비즈니스 작업 요청을 위해 BoardWriteProService 클래스의 인스턴스 생성 후 
   registBoard() 메서드 호출
5. BoardWriteProService 의 registBoard() 메서드에서 
   BoardDAO 객체의 insertBoard() 메서드를 호출하여 글쓰기 작업 요청
6. BoardDAO 객체의 insertBoard() 메서드에서 DB 작업을 통한 INSERT 작업 수행 후 
   결과값(insertCount) 리턴
7. BoardWriteProService 객체에서 BoardDAO 로부터 리턴받은 결과값을 판별
   - 성공 시 commit 작업 및 결과값(isWriteSuccess)을 true 로 변경 후 리턴
   - 실패 시 rollback 작업 수행 후 결과값(isWriteSuccess) 리턴
8. BoardWriteProAction 객체에서 BoardWriteProService 객체로부터 리턴받은 결과값을 판별
   - 성공 시 ActionForward 객체를 사용하여 "BoardList.bo" 서블릿 요청(Redirect 방식)
   - 실패 시 자바스크립트를 사용하여 "글쓰기 실패!" 출력 후 이전페이지로 돌아가기
--------------------------------------------------------------------------------------
< 글목록 작업 흐름 >
1. 서블릿 주소 "/BoardList.bo" 입력 시
   BoardFrontController 에 의해 Action(BoardListAction) 클래스의 인스턴스 생성 후 
   execute() 메서드 호출
2. BoardListAction 클래스의 execute() 메서드에서 데이터 준비 작업 후
   BoardListService 클래스의 getBoardList() 메서드를 호출하여 
   전체 게시물 목록 조회 작업 요청
3. BoardListService 클래스의 getBoardList() 메서드에서 
   BoardDAO 의 selectBoardList() 메서드를 호출하여
   전체 게시물 목록 조회 후 목록 조회를 저장한 List<BoardBean> 객체를 리턴받아
   다시 Action 클래스로 리턴
4. BoardListService 의 getBoardListCount() 메서드를 호출하여 
   전체 게시물 수 조회 요청
5. BoardListService 의 getBoardListCount() 메서드에서 
   BoardDAO 의 selectBoardListCount() 메서드를 호출하여
   전체 게시물 목록의 갯수 조회 후 결과값(listCount) 리턴받아 
   해당 결과값을 다시 Action 클래스로 리턴
6. BoardListAction 에서 전체 게시물 조회 결과(listCount)를 리턴받아 저장 후
   다시 Action 클래스로 리턴 후 페이징 처리 정보 계산하여 PageInfo 객체에 저장
7. BoardListAction 클래스에서 리턴받은 List<BoardBean> 객체, 페이징 정보를 request 객체에 저장한 후
   ActionForward 객체를 사용하여 /board/board_list.jsp 페이지로 포워딩(Dispatcher 방식)










