정규표현식(Regular Expression, Regex)
- 문자열을 처리하는데 사용된 패턴 기반 문자열(식)
- 정규표현식을 통해 처리할 문자열 패턴(규칙)을 지정하고
  특정 클래스 등을 사용하여 정규표현식에 해당하는지 여부를 체크
- 주로, 패스워드 규칙(복잡도) 검사나 전화번호 또는 이메일 등의 양식 체크 등
  (Validation check 라고 함)
- 프로그램 개발 뿐만 아니라 네트워크, 웹 등에서 공통으로 사용 가능한 표준 표현식
  (언어 역시 자바, 자바스크립트 등 다양한 언어에서 활용 가능)

< 정규표현식에 사용되는 패턴 문자 = 메타 문자(Meta character) >
=> 정규표현식 작성 시 x 또는 y 라는 문자(또는 문자열)를 기준으로 
   앞 또는 뒤에 기호를 붙여 패턴 지정

[ 일반 기호 ]
1. ^x : x 로 시작하는 문자열
   ex) "x", "xa", "xxx", "xyz" 등 => 사용 가능한 문자열(= 패턴 규칙에 부합)
       "ya", "yx", "yyy", "zyx" 등 => 사용 불가능한 문자열(= 패턴 규칙에 부합X)
   ex2) x 가 숫자라는 의미일 때 : "숫자admin"(O), "숫자123"(O), "admin숫자"(X)

2. x$ : x 로 끝나는 문자열
   ex) "x", "ax", "xxx", "abx" 등 => 사용 가능
       "xy", "xa", "xyz", "xab" 등 => 사용 불가능

-------------------------------------------------------------------------------
참고. ^x$ : x 로 시작해서 x 로 끝나는 문자열(= x가 딱 1개만 존재하는 경우)
      ex) "x" 만 해당되며 나머지는 모두 해당되지 않음
          "xy"(X), "x1"(X), "ax"(X)
-------------------------------------------------------------------------------
3. .x : x 앞에 1개의 문자가 포함되는 문자열
   ex) "ax", "bx", "abxy" => 사용 가능
       "xa", "xb", "x"    => 사용 불가능
   ex2) 만약, ^.x$ 일 경우 무조건 x 앞에 1개의 문자만 있어야 하며 x로 끝나야함
        "ax", "bx" => 사용 가능
        "abxy"     => 사용 불가능(x 앞에 2개의 문자이며, x 뒤에 문자가 있음)

4. x+ : x가 1번 이상 반복되는 문자열
   ex) "x", "xx", "xxx", "xyz" 등

5. x* : x가 0번 이상 반복되는 문자열
   (단, 단독으로 사용 시 아무 문자열이나 해당되므로, 주로 다른 패턴과 결합하여 사용)
   ex) "", "a", "x", "xx", "xyz" 등

6. x? : x가 포함될 수도 있고, 포함되지 않을 수도 있는 문자열   
   (단, 단독으로 사용 시 아무 문자열이나 해당되므로, 주로 다른 패턴과 결합하여 사용)
   ex) "", "a", "x", "xx", "xyz" 등

7. x|y : x 또는 y 가 포함되는 문자열
   ex) "x", "y", "xy", "1x", "xyz" 등 => 사용 가능
       "1", "ab" 등                   => 사용 불가능
------------------------------------------------------------------------------
[ 연습문제 ]
1) xa?y$
=> 시작 문자는 상관없음.
=> 문자열 내에서 x 뒤에 a 가 올 수도 있고, 안 올 수도 있으며,
   그 뒤에는 y 로 끝나는 문자열
ex) "xy"     (O) => x 뒤에 a 는 없지만, 그 뒤가 y 로 끝남
    "xay"    (O) => x 뒤에 a 가 오고, 그 뒤가 y 로 끝남
    "hixy"   (O) => x 앞의 문자열 무관, x 뒤에 a 는 없지만, 그 뒤가 y 로 끝남
    "hixzy"  (X) => x 앞의 문자열 무관, x 뒤에 a 또는 y 가 아니므로 사용 불가
    "xyz"    (X) => x 뒤에 y 가 오더라도 뒤의 z 때문에 y 로 끝나지 않으므로 사용 불가

2) x|a?y$
=> 시작 문자는 무관.
=> 문자열에 x가 포함되거나
   또는 a?y$ 규칙에 부합되는 문자열
ex) "xy"(O), "hixy"(O), "hizy"(O), "hixay"(O), "ay1"(X)

=================================================================================
[ 괄호 문자 ]
1. (xy) : 소괄호 안의 내용(xy)이 그대로 포함되는 문자열(= 괄호 안 문자열의 그룹화)
   ex) "xy"(O), "yx"(X), "axy"(O)
   
2. x{n} : x 가 n번만큼 반복되는 문자열(정확히 n번)
   ex) x{5} : x 가 정확히 5개인 문자열
       => "xxxxx"(O), "axxxxxy"(O), "xxx"(X), "ax"(X)

3. x{n,} : x 가 n번 이상 반복되는 문자열
   ex) x{5,} : x 가 5개 이상인 문자열
       => "xxxxx"(O), "axxxxxy"(O), "xxxxxxxxxxxxxx"(O), "xxxx"(X)

4. x{n,m} : x 가 n번 이상 m번 이하 반복되는 문자열
   ex) x{2,4} : x가 2개 이상, 4개 이하인 문자열
       => "xx"(O), "xxx"(O), "xxxx"(O), "xxxxxxxxx"(X)

5. [] 대괄호는 괄호 내의 구성요소를 종합적으로 확인하는 용도
   (괄호 안의 내용 중 하나에 대해 일치하는지 여부 검사)
   5-1. [x] : x 에 해당하는 문자 1개
   5-2. [^x] : x 에 해당하지 않는 문자 1개(= x 를 뺀 나머지 문자 1개만 해당)
               (^ 기호를 대괄호 안에 사용 시 부정(NOT)의 의미로 사용됨)
   5-3. [x-y] : x 부터 y 까지 범위의 문자 1개
        => [A-Z] : 대문자 A 부터 대문자 Z 사이의 문자 중 1개
        => [a-z] : 소문자 a 부터 소문자 z 사이의 문자 중 1개
        => [0-9] : 숫자 0 부터 숫자 9 사이 중 1개
        => [가-힣] : 한글 1개
   => 주로, 중괄호(반복 횟수 지정)와 조합하여 많이 사용
   ex) ^[가-힣]{2,5}$ : 한글 2글자 ~ 5글자 사이(주로, 한글 이름 등 확인용으로 사용)
       ^[A-Z]{2,8}$ : 영문 대문자 2 ~ 8글자
       ^[A-Za-z]{2,8}$ : 영문자(대문자 또는 소문자) 2 ~ 8글자
       ^[A-Za-z0-9]{2,8}$ : 영문자(대문자 또는 소문자) 또는 숫자 2 ~ 8글자
       ^[A-Za-z][A-Za-z0-9]{7,15}$
        => 영문자로 시작하고, 그 뒤는 영문자 또는 숫자 7 ~ 15글자 사용
        => 전체 길이 8 ~ 16자 내에서 첫 글자는 영문자고, 나머지는 영문자 or 숫자
           (주의! 처음 [A-Za-z] 부분에서 1글자 처리하므로 나머지 7 ~ 15글자 뒤에서 처리)

    ex2) 식별자 작성 규칙 
         1) 첫글자 숫자 사용 불가(= 첫글자는 영문자, 특수문자 $ 와 _ 사용 가능)
         2) 특수문자는 $ 와 _ 사용 가능
         3) 공백 올 수 없음
         4) 예약어(키워드) 사용 불가
         5) 길이 제한 없음
         => 1번 & 2번 & 5번 규칙만 적용하여 정규표현식으로 나타낼 경우
            ^[A-Za-z$_][A-Za-z$_0-9]{0,}$ 또는 ^[A-Za-z$_][A-Za-z$_0-9]+$
------------------------------------------------------------------------------------------------------
연습문제) ^a{1}b{2}c{2,4}$ 
=> a가 한글자 b가 2글자  c가2~4 글자를 가진다. 
    ex) abbcc(O), abbccc(O), abbcccccc(X), aabbcc(X)

======================================================================================================
[ 예외 문자 ]
- 자바의 이스케이프 문자(\n 등) 같은 특정 기능을 수행하는 역할 ]
- \ 기호뒤에 특정 문자를 지정

\^ : 지정된 기호를 패턴으로 인식하지 않고, 일반 문자로 인식(^$+\.등)
\d : 숫자 => [0123456789] 또는 [0~9]와 동일
\D : 숫자가 아닌 것 =>[^0~9]와 동일
\s : 공백문자
\S : 공백문자가 아닌 것
\w : 영단어 구성 요소(알파벳, 숫자, 언더스코어(_))
\W : 영단어 구성 요소가 아닌 것
            
======================================================================================================
[유용한 정규표현식 예]
1. 한글 이름(2 ~ 5글자) :^[가-힣]{2,5}$
2. 네이버 아이디(영문 소문자,숫자, 특수문자(- 또는 _) 5 ~ 20 글자 : ^[a-z0-9-_]{5,20}$
3. 패스워드(영문자,숫자,특수문자(!@#$%) 8 ~ 16 글자 : [A-Za-z0-9!@#$%]{8,16}$
4. 휴대폰 번호
     - 국번은 010 또는 011로 시작하고, 국번 뒤에 하이픈(-)또는 공백이 포함될 수도 있고, 포함되지 않을 수도 있으며,
     - 가운데 숫자는 3 ~ 4 자리로 구성되고, 뒤에  하이픈(-)또는 공백이 포함될 수도 있고, 포함되지 않을 수도 있다.
     - 마지막 숫자는 4자리로 끝
^(010|011)[-\s]?[0-9]{3,4}[-\s]?[0-9]{4}$
======================================================================================================



   

   

























