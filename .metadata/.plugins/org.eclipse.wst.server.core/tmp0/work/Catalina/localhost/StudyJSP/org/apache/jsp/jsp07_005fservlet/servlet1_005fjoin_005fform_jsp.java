/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-04-07 02:08:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp07_005fservlet;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class servlet1_005fjoin_005fform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	/*\r\n");
      out.write("	1. ID 중복확인 버튼 클릭 시 새 창(check_id.html) 띄우기\r\n");
      out.write("	=> 단, 입력된 ID 텍스트의 길이가 4 ~ 8글자 사이일 때만 새 창을 띄우고\r\n");
      out.write("	    아니면, \"4~8글자만 사용가능합니다\" 메세지 출력하기(alert() 함수 사용)\r\n");
      out.write("	=> 새 창 띄울 때 ID중복확인 버튼 우측 빈공간에 \"중복확인완료\" 표시하기\r\n");
      out.write("	*/\r\n");
      out.write("	function checkDupId() {\r\n");
      out.write("		// 입력받은 ID 값 가져와서 변수에 저장\r\n");
      out.write("		let id = document.fr.id.value;\r\n");
      out.write("		\r\n");
      out.write("		// ID 값에 대한 길이 판별(4 ~ 8글자 사이 여부)\r\n");
      out.write("		if(id.length >= 4 && id.length <= 8) { // 유효한 길이일 경우\r\n");
      out.write("			// check_id.html 파일을 새 창으로 열기\r\n");
      out.write("			window.open(\"check_id.html\", \"checkId\", \"width=400, height=250\");\r\n");
      out.write("			document.querySelector(\"#checkIdResult\").innerHTML = \"중복확인완료\";\r\n");
      out.write("		} else { // 유효하지 않은 길이\r\n");
      out.write("			alert(\"아이디 4 ~ 8글자 필수!\");\r\n");
      out.write("			document.querySelector(\"#checkIdResult\").innerHTML = \"\";\r\n");
      out.write("			document.fr.id.select();\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*\r\n");
      out.write("	2. 비밀번호 입력란에 키를 누를때마다 비밀번호 길이 체크하기\r\n");
      out.write("	=> 체크 결과를 비밀번호 입력창 우측 빈공간에 표시하기\r\n");
      out.write("	=> 비밀번호 길이 체크를 통해 8 ~ 16글자 사이이면 \"사용 가능한 패스워드\"(파란색) 표시,\r\n");
      out.write("	   아니면, \"사용 불가능한 패스워드\"(빨간색) 표시\r\n");
      out.write("	*/\r\n");
      out.write("	function checkPasswd(passwd) {\r\n");
      out.write("		// span 태그 영역 객체 가져오기\r\n");
      out.write("		let span = document.querySelector(\"#checkPasswdResult\");\r\n");
      out.write("		\r\n");
      out.write("		// 입력된 패스워드 길이 체크\r\n");
      out.write("		if(passwd.length >= 8 && passwd.length <= 16) { // 길이 체크 통과\r\n");
      out.write("			span.innerHTML = \"사용 가능한 패스워드\";\r\n");
      out.write("			span.style.color = \"BLUE\";\r\n");
      out.write("		} else {\r\n");
      out.write("			span.innerHTML = \"사용 불가능한 패스워드\";\r\n");
      out.write("			span.style.color = \"RED\";\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*\r\n");
      out.write("	3. 비밀번호확인 입력란에 키를 누를때마다 비밀번호와 같은지 체크하기\r\n");
      out.write("	=> 체크 결과를 비밀번호확인 입력창 우측 빈공간에 표시하기\r\n");
      out.write("	=> 비밀번호와 비밀번호확인 입력 내용이 같으면 \"비밀번호 일치\"(파란색) 표시,\r\n");
      out.write("	   아니면, \"비밀번호 불일치\"(빨간색) 표시\r\n");
      out.write("	*/\r\n");
      out.write("	function checkConfirmPasswd(confirmPasswd) {\r\n");
      out.write("		// span 태그 영역 객체 가져오기\r\n");
      out.write("		let span = document.querySelector(\"#checkConfirmPasswdResult\");\r\n");
      out.write("		\r\n");
      out.write("		// 패스워드 입력란에 입력된 패스워드 가져오기\r\n");
      out.write("		let passwd = document.fr.passwd.value;\r\n");
      out.write("		\r\n");
      out.write("		// 두 패스워드 일치 여부 판별\r\n");
      out.write("		if(passwd == confirmPasswd) { // 두 패스워드 일치\r\n");
      out.write("			span.innerHTML = \"패스워드 일치\";\r\n");
      out.write("			span.style.color = \"BLUE\";\r\n");
      out.write("		} else {\r\n");
      out.write("			span.innerHTML = \"패스워드 불일치\";\r\n");
      out.write("			span.style.color = \"RED\";\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*\r\n");
      out.write("	4. 주민번호 숫자 입력할때마다 길이 체크하기\r\n");
      out.write("	=> 주민번호 앞자리 입력란에 입력된 숫자가 6자리이면 뒷자리 입력란으로 커서 이동시키기\r\n");
      out.write("	=> 주민번호 뒷자리 입력란에 입력된 숫자가 7자리이면 뒷자리 입력란에서 커서 제거하기\r\n");
      out.write("	*/\r\n");
      out.write("	function checkJumin1(jumin1) {\r\n");
      out.write("		if(jumin1.length == 6) {\r\n");
      out.write("			document.fr.jumin2.focus(); // 포커스(커서) 요청\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function checkJumin2(jumin2) {\r\n");
      out.write("		if(jumin2.length == 7) {\r\n");
      out.write("			document.fr.jumin2.blur(); // 포커스(커서) 해제\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*\r\n");
      out.write("	5. 이메일 도메인 선택 셀렉트 박스 항목 변경 시 \r\n");
      out.write("	   선택된 셀렉트 박스 값을 이메일 두번째 항목(@ 기호 뒤)에 표시하기\r\n");
      out.write("	   단, 직접입력 선택 시 표시된 도메인 삭제하기\r\n");
      out.write("	*/\r\n");
      out.write("	function selectDomain(domain) {\r\n");
      out.write("		// 직접입력의 경우 널스트링(\"\") 값이 할당되어 있으므로\r\n");
      out.write("		// 모든 값을 email2 영역에 표시하면 직접입력 선택 시 널스트링이 표시됨\r\n");
      out.write("		document.fr.email2.value = domain;\r\n");
      out.write("		\r\n");
      out.write("		// 추가사항. \"직접입력\" 항목 외의 도메인 선택 시\r\n");
      out.write("		// 도메인 입력창을 잠금처리하고 회색으로 변경\r\n");
      out.write("		// 아니면, 도메인 입력창에 커서 요청 및 잠금 해제\r\n");
      out.write("		// => 주의! HTML 태그 속성명이 두 단어 이상의 조합일 경우\r\n");
      out.write("		//    자바스크립트에서는 Camel-case 표기법으로 속성명을 지정해야한다!\r\n");
      out.write("		//    ex) readonly 속성 : readOnly 로 표기\r\n");
      out.write("		if(domain != \"\") { // 도메인 선택 시\r\n");
      out.write("// 			document.fr.email2.disabled = true; // 입력창 비활성화\r\n");
      out.write("			// => 주의! disabled 속성 지정 시 입력창 잠금은 동일하나 \r\n");
      out.write("			//    차후에 폼 데이터 전송 과정에서 해당 데이터는 전송 대상에서 제외됨!\r\n");
      out.write("			// => readOnly 속성을 통해 입력창 잠금 후에도 데이터 전송이 가능해진다!\r\n");
      out.write("			document.fr.email2.readOnly = true; // 입력창 읽기전용 설정\r\n");
      out.write("			document.fr.email2.style.background = \"LIGHTGRAY\";\r\n");
      out.write("		} else { // 직접입력 선택 시\r\n");
      out.write("			document.fr.email2.readOnly = false; // 읽기전용 해제\r\n");
      out.write("			document.fr.email2.style.background = \"WHITE\";\r\n");
      out.write("			document.fr.email2.focus();\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 6. 취미의 \"전체선택\" 체크박스 체크 시 취미 항목 모두 체크, \r\n");
      out.write("    //    \"전체선택\" 해제 시 취미 항목 모두 체크 해제하기\r\n");
      out.write("    function checkAll(isChecked) {\r\n");
      out.write("// 		if(isChecked) {\r\n");
      out.write("// 			document.fr.hobby[0].checked = true;\r\n");
      out.write("// 			document.fr.hobby[1].checked = true;\r\n");
      out.write("// 			document.fr.hobby[2].checked = true;\r\n");
      out.write("// 		} else {\r\n");
      out.write("// 			document.fr.hobby[0].checked = false;\r\n");
      out.write("// 			document.fr.hobby[1].checked = false;\r\n");
      out.write("// 			document.fr.hobby[2].checked = false;\r\n");
      out.write("// 		}\r\n");
      out.write("\r\n");
      out.write("//     	document.fr.hobby[0].checked = isChecked;\r\n");
      out.write("// 		document.fr.hobby[1].checked = isChecked;\r\n");
      out.write("// 		document.fr.hobby[2].checked = isChecked;\r\n");
      out.write("\r\n");
      out.write("		// for...of 문 등의 반복문을 통해 작업 가능\r\n");
      out.write("		for(hobby of document.fr.hobby) {\r\n");
      out.write("			hobby.checked = isChecked;\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>	\r\n");
      out.write("	<div align=\"center\">\r\n");
      out.write("		<h1>회원 가입</h1>\r\n");
      out.write("		<form action=\"jsp07_join\" method=\"post\" name=\"fr\">\r\n");
      out.write("			<table border=\"1\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>이름</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"name\"></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>아이디</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" name=\"id\" placeholder=\"4 ~ 8글자 사이 입력\">\r\n");
      out.write("						<input type=\"button\" value=\"ID중복확인\" onclick=\"checkDupId()\">\r\n");
      out.write("						<span id=\"checkIdResult\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>비밀번호</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<!-- 키 누를때마다 checkPasswd() 함수에 입력받은 패스워드 전달하여 호출 -->\r\n");
      out.write("						<input type=\"password\" name=\"passwd\" onkeyup=\"checkPasswd(this.value)\" placeholder=\"8 ~ 16글자 사이 입력\">\r\n");
      out.write("						<span id=\"checkPasswdResult\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>비밀번호확인</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<!-- 키 누를때마다 checkConfirmPasswd() 함수에 입력받은 패스워드 전달하여 호출 -->\r\n");
      out.write("						<input type=\"password\" name=\"passwd2\" onkeyup=\"checkConfirmPasswd(this.value)\">\r\n");
      out.write("						<span id=\"checkConfirmPasswdResult\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>주민번호</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" name=\"jumin1\" onkeyup=\"checkJumin1(this.value)\"> -\r\n");
      out.write("						<input type=\"text\" name=\"jumin2\" onkeyup=\"checkJumin2(this.value)\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>E-Mail</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" name=\"email1\"> @\r\n");
      out.write("						<input type=\"text\" name=\"email2\">\r\n");
      out.write("						<select name=\"emailDomain\" onchange=\"selectDomain(this.value)\">\r\n");
      out.write("							<option value=\"\">직접입력</option>\r\n");
      out.write("							<option value=\"naver.com\">naver.com</option>\r\n");
      out.write("							<option value=\"gmail.com\">gmail.com</option>\r\n");
      out.write("							<option value=\"nate.com\">nate.com</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>직업</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<select name=\"job\">\r\n");
      out.write("							<option value=\"\">항목을 선택하세요</option>\r\n");
      out.write("							<option value=\"개발자\">개발자</option>\r\n");
      out.write("							<option value=\"DB엔지니어\">DB엔지니어</option>\r\n");
      out.write("							<option value=\"서버엔지니어\">서버엔지니어</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>성별</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"radio\" name=\"gender\" value=\"남\">남\r\n");
      out.write("						<input type=\"radio\" name=\"gender\" value=\"여\">여\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>취미</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"checkbox\" name=\"hobby\" value=\"여행\">여행\r\n");
      out.write("						<input type=\"checkbox\" name=\"hobby\" value=\"독서\">독서\r\n");
      out.write("						<input type=\"checkbox\" name=\"hobby\" value=\"게임\">게임\r\n");
      out.write("						<!-- 전체선택 체크박스 클릭 시 체크상태(checked 속성의 true 또는 false) 를 함수에 전달 -->\r\n");
      out.write("						<input type=\"checkbox\" value=\"전체선택\" onclick=\"checkAll(this.checked)\">전체선택\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>가입동기</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<textarea rows=\"5\" cols=\"40\" name=\"motivation\"></textarea>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\" align=\"center\">\r\n");
      out.write("						<input type=\"submit\" value=\"가입\">\r\n");
      out.write("						<input type=\"reset\" value=\"초기화\">\r\n");
      out.write("						<input type=\"button\" value=\"돌아가기\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
