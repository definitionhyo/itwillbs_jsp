/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-03-29 00:41:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp01;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Calendar;

public final class test4_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Calendar");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

// 스크립틀릿(자바의 메서드 내부와 동일)
// 인스턴스 생성, 변수 선언 등의 대부분의 작업이 가능(메서드 정의 등 제외)
Calendar c = Calendar.getInstance();
int hour = c.get(Calendar.HOUR); // 로컬변수
int min = c.get(Calendar.MINUTE); // 로컬변수
int sec = c.get(Calendar.SECOND); // 로컬변수

      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>test4.jsp - 스크립틀릿과 표현식 연습</h1>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<h3>현재 시각은 ");
      out.print(hour );
      out.write('시');
      out.write(' ');
      out.print(min );
      out.write('분');
      out.write(' ');
      out.print(sec );
      out.write("초 입니다.</h3>\r\n");
      out.write("	\r\n");
      out.write("	");

	// 스크립틀릿 내에서 표현식과 동일한 방식으로 데이터 출력을 위해서는
	// JSP 내장 객체인 out 객체의 print() 또는 println() 메서드로 출력해야한다.
	// => 파라미터 타입이 문자열 형식으로, HTML 태그까지 그대로 적용 가능
	out.print("<h3>현재 시각은 " + hour + "시 " + min + "분 " + sec + "초 입니다.</h3>");
	
      out.write("\r\n");
      out.write("	<hr>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');

	// 1번 방법. 스크립틀릿 내에서 out.print() 메서드를 통해 출력할 태그를 문자열로 지정
	// if문을 사용하여 현재 시각(hour)이 12 미만이면 "오전입니다", 아니면 "오후입니다" 출력
	if(hour < 12) {
		out.print("<h3>오전입니다.</h3>");
	} else {
		out.print("<h3>오후입니다.</h3>");
	}
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	");

	// 2번 방법. 스크립틀릿으로 if문만 표현하고, 출력 데이터는 스크립틀릿 외부에 표현
	// if문 블록 사이에서 태그 형식 그대로 나타내려면 스크립틀릿을 닫은 상태로 사용
	if(hour < 12) {
		
      out.write("<h3>오전입니다.</h3>");

	} else {
		
      out.write("<h3>오후입니다.</h3>");

	}
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	");
if(hour < 12) { 
      out.write("\r\n");
      out.write("		<h3>오전입니다.</h3>\r\n");
      out.write("	");
} else { 
      out.write("\r\n");
      out.write("		<h3>오후입니다.</h3>\r\n");
      out.write("	");
} 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
