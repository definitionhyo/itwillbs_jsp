/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-03-29 03:47:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp02_005frequest_005fresponse;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Arrays;

public final class requestPro1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Arrays");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>requestPro1.jsp - 요청 파라미터 처리</h1>\r\n");
      out.write("	");

	/*
	requestForm1.jsp 페이지에서 submit 버튼 클릭 시
	form 태그 내의 데이터(= 폼 파라미터)가 request 객체에 모두 저장되고
	action 속성에 지정된 페이지로 이동(= 페이지를 요청)하면서 데이터 전달함
	=> 요청 관련 모든 정보는 request 객체가 관리(= JSP 가 자동으로 생성하는 객체 = 내장 객체)
	   따라서, request.메서드명() 형태로 request 객체의 메서드 호출하여 객체 다루기 가능
	=> 요청받은 request 객체에 저장된 폼 파라미터 데이터를 가져오는 방법
	   1) request.getParameter("파라미터명"); // 단일 파라미터 데이터 가져오기 = String 리턴
	   2) request.getParameterValues("파라미터명"); // 복수 항목 파라미터 가져오기 
	      = String[] 리턴(주로, checkbox 처럼 하나의 이름으로 복수개의 파라미터 전달할 경우 사용)
	=> 주의! 지정된 파라미터가 존재하지 않을 경우(지정한 이름이 없을 경우) null 값이 리턴되고,
	   파라미터는 있으나 데이터가 없는 경우에는 널스트링("") 값이 리턴됨
	*/
	
	// ------------------------------------------------------------------------------
	// POST 방식으로 파라미터가 전달될 경우 한글 파라미터에 대한 처리 방법
	// => GET 방식일 경우 JSP page 디렉티브(또는 meta 태그)에 UTF-8 지정하면 되지만
	//    POST 방식일 경우 request 객체에 대해 한글 인코딩 처리를 별도로 수행해야한다!
	// => 반드시 응답 데이터 생성 페이지(request 객체를 통해 데이터 가져오는 페이지)에서
	//    한글 인코딩 방식을 변경해야한다!
	// => request 객체의 setCharacterEncoding() 메서드를 호출하여 "UTF-8" 전달
	// ------------------------------------------------------------------------------
	
	// 1. 폼 파라미터 중 파라미터명(name 속성값)이 "name" 인 값을 가져와서 
	//    String 타입 변수 strName 에 저장
	String strName = request.getParameter("name");
	// 스크립틀릿 내에서 브라우저에 데이터 출력 시 out.print() 메서드 사용
// 	out.print("이름 : " + strName + "<br>");
	request.setCharacterEncoding("UTF-8"); // "UTF8" 또는 "UTF-8" 동일
	
	// 2. 파라미터 중 파라미터명이 "age" 인 값 가져와서 String 타입 strAge 에 저장
	String strAge = request.getParameter("age");
// 	out.print("나이 : " + strAge + "<br>");
	
	// 3. 파라미터 중 파라미터명이 "gender" 인 값 가져와서 String 타입 strGender 에 저장
	String strGender = request.getParameter("gender");
// 	out.print("성별 : " + strGender + "<br>");
	
	// 4. 파라미터 중 파라미터명이 "hobby" 인 값 가져와서 String 타입 strHobby 에 저장
// 	String strHobby = request.getParameter("hobby");
// 	out.print("취미 : " + strHobby + "<br>");
	// 주의! 복수개의 데이터가 하나의 파라미터명으로 전달되는 경우(ex. 체크박스)
	// getParameter() 메서드를 사용 시 하나의 데이터(첫번째 데이터)만 리턴함
	// 따라서, getParameter() 메서드 대신 getParameterValues() 메서드를 호출하여
	// 복수개의 동일한 이름의 파라미터를 String[] 타입으로 리턴받아 처리해야함
	String[] arrHobbies = request.getParameterValues("hobby");
// 	out.print("취미 : " + arrHobbies + "<br>");
// 	out.print("취미 : " + Arrays.toString(arrHobbies) + "<br>");
	// => 주의! 체크박스의 경우 항목을 하나도 체크하지 않으면 "hobby" 파라미터가 없게되므로
	//    배열에 아무것도 전달되지 못하게 되어 null 값이 저장됨 = 배열이 존재하지 않음
	//    (일반적인 입력항목 미입력 시 파라미터 자체는 전달되고 값이 없으므로 "" 전달됨)
	
      out.write("\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>이름</th>\r\n");
      out.write("			<td>");
      out.print(strName );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>나이</th>\r\n");
      out.write("			<td>");
      out.print(strAge );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>성별</th>\r\n");
      out.write("			<td>");
      out.print(strGender );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>취미</th>\r\n");
      out.write("\r\n");
      out.write("			<td>\r\n");
      out.write("				");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("				");
      out.write("\r\n");
      out.write("				");

// 				for(int i = 0; i < arrHobbies.length; i++) { // 미체크 시 오류 발생할 수 있음
// 					out.print(arrHobbies[i] + " ");
// 				}
				
      out.write("\r\n");
      out.write("				\r\n");
      out.write("				");
      out.write("\r\n");
      out.write("				");

				if(arrHobbies != null) {
					for(int i = 0; i < arrHobbies.length; i++) {
						out.print(arrHobbies[i] + " ");
					}
				} else {
					
      out.write("\r\n");
      out.write("					// 체크 항목이 하나도 없을 경우 \"없음\" 출력\r\n");
      out.write("// 					out.print(\"없음\");\r\n");
      out.write("					\r\n");
      out.write("					");
      out.write("\r\n");
      out.write("					<script type=\"text/javascript\">\r\n");
      out.write("						alert(\"취미 선택 필수!\");\r\n");
      out.write("						history.back();\r\n");
      out.write("					</script>\r\n");
      out.write("					");

				}
				
      out.write("\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
