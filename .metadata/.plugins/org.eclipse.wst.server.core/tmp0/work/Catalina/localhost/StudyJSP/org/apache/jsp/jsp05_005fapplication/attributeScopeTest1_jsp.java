/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-04-03 01:43:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp05_005fapplication;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class attributeScopeTest1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>영역 객체 속성 및 범위</h1>\r\n");
      out.write("	");

	/*
	JSP 의 4대 영역 : page, request, session, application
	4대 영역 객체 : pageContext, request, session, application
	1) pageContext 객체 : 현재 페이지에서만 유효(= 페이지 이동 시 객체 제거됨)
	2) request 객체 : 클라이언트 요청에 대한 응답까지 유효(= 새로운 요청 발생 시 객체 제거됨)
	3) session 객체 : 세션 유지 조건까지 유효(= 세션 제거 조건 충족 시 객체 제거됨)
	4) application 객체 : 서버 동작 시까지 유효(= 서버 중지 시 객체 제거됨)
	----------------------------------------------------------------------------------
	각 영역 객체에 속성값 저장하는 공통 메서드 : setAttribute(String name, Object value)
	각 영역 객체의 속성값 접근하는 공통 메서드 : Object getAttribute(String name)
	*/
	pageContext.setAttribute("pageScope", "pageContext value");
	request.setAttribute("requestScope", "request value");
	session.setAttribute("sessionScope", "session value");
	application.setAttribute("applicationScope", "application value");
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<h3>pageContext 객체 값 : ");
      out.print(pageContext.getAttribute("pageScope") );
      out.write("</h3>\r\n");
      out.write("	<h3>request 객체 값 : ");
      out.print(request.getAttribute("requestScope") );
      out.write("</h3>\r\n");
      out.write("	<h3>session 객체 값 : ");
      out.print(session.getAttribute("sessionScope") );
      out.write("</h3>\r\n");
      out.write("	<h3>application 객체 값 : ");
      out.print(application.getAttribute("applicationScope") );
      out.write("</h3>\r\n");
      out.write("	\r\n");
      out.write("	");

	// attributeScopeTest2.jsp 페이지로 이동하는 방법
	// 1. Redirect 방식 : response 객체의 sendRedirect() 메서드 사용
// 	response.sendRedirect("attributeScopeTest2.jsp");
	/*
	기존 요청과 다른 새로운 요청이 발생하여 기존 request 객체가 제거되고
	새로운 request 객체가 생성되므로 기존 request 객체에 저장된 정보는 제거됨
	따라서, 리다이렉트 된 페이지에서 request 객체의 속성에 접근 시 null 값이 출력됨
	또한, 새로운 요청 주소로 웹브라우저 주소 표시줄의 주소(URL)가 변경됨
	=> pageContext 객체의 속성값은 현재 페이지를 벗어났으므로 null 값 출력됨
	=> request 객체의 속성값은 새로운 요청이 발생했으므로 null 값 출력됨
	=> session, application 객체의 속성값은 유지됨(null 아님)
	*/
		
	// 2. Dispatch 방식 : pageContext 객체의 forward() 메서드 사용
	pageContext.forward("attributeScopeTest2.jsp");
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
