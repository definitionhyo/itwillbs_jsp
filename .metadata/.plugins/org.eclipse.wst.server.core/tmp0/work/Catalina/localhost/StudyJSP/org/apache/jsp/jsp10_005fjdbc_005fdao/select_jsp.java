/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-04-17 03:09:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp10_005fjdbc_005fdao;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import jsp10_jdbc_dao.StudentDTO;

public final class select_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("jsp10_jdbc_dao.StudentDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

// DbcpSelectServlet 클래스로부터 전달받은 request 객체 내에 저장되어 있는
// StudentDTO 객체를 꺼내서 변수에 저장하기
// => request 객체의 getAttribute() 메서드를 호출하여 속성명("student") 지정
//    리턴타입이 Object 타입이므로 StudentDTO 타입 다운캐스팅 필수!
// StudentDTO student = (StudentDTO)request.getAttribute("student");

// 학생 목록이 저장되어 있는 List<StudentDTO> 객체 꺼내서 저장하기
// => request 객체의 getAttribute() 메서드를 호출하여 속성명("studentList") 지정
//    리턴타입이 Object 타입이므로 ??? 타입 다운캐스팅 필수!
List<StudentDTO> studentList = (List<StudentDTO>)request.getAttribute("studentList");		

      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>select.jsp</h1>\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>번호</th>\r\n");
      out.write("			<th>이름</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");

		// 위에서 전달받은 List<StudentDTO> 객체를 for문을 통해 반복하면서
		// 내부에 저장되어 있는 StudentDTO 객체를 차례대로 꺼내기
		// => 일반 for문 또는 향상된 for문 모두 사용 가능
		// 1) 일반 for문(배열 크기 대신 List 객체의 size() 메서드로 크기 판별)
// 		for(int i = 0; i < studentList.size(); i++) {
			// 전체 레코드가 저장된 List 객체의 get() 메서드를 호출하여
			// 각각의 StudentDTO 객체 꺼내서 변수에 저장하기
			// => 이 때, 파라미터는 List 객체의 인덱스 번호(i)를 전달
// 			StudentDTO student = studentList.get(i);
			
      out.write("\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("<!-- 			<tr> -->\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<!-- 			</tr> -->\r\n");
      out.write("			");

// 		}
		
		// -------------------------------------------------------------
		// 2) 향상된 for문
		//    => List 객체를 반복하면서 StudentDTO 타입 변수에 저장된 데이터 전달
		//       (단, 반드시 List 객체가 List<StudentDTO> 타입어어야 한다!)
		for(StudentDTO student : studentList) {
			// for문에서 객체 꺼내는 작업까지 완료되어 있으므로 즉시 접근 가능
			
      out.write("\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>");
      out.print(student.getIdx() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(student.getName() );
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			");

		}
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
