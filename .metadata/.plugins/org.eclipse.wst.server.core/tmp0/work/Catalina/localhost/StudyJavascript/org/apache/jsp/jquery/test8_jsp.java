/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-05-23 01:22:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test8_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"../js/jquery-3.7.0.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	/*\r\n");
      out.write("	submit()\r\n");
      out.write("	- submit 동작에 대한 이벤트 처리 가능한 메서드\r\n");
      out.write("	- 자바스크립트에서의 기본적인 submit 처리 방법과 동일\r\n");
      out.write("	=> form 태그 지정 후 submit() 메서드를 호출하여 수행할 동작을 익명함수로 구현\r\n");
      out.write("	*/\r\n");
      out.write("	$(function() {\r\n");
      out.write("		$(\"form\").submit(function() {\r\n");
      out.write("			// id 선택자 \"selectBox\"의 자식 option 요소들 중\r\n");
      out.write("			// 첫번째 option 태그의 selected 속성값 출력 => prop() 메서드 활용\r\n");
      out.write("// 			alert($(\"#selectBox > option\").eq(0).prop(\"selected\"));\r\n");
      out.write("			\r\n");
      out.write("			// 만약, 첫번째 option 태그의 selected 속성 상태가 true 일 경우(선택된 경우)\r\n");
      out.write("			// \"항목 선택 필수!\" 출력 후 폼 전송 취소(return false), \r\n");
      out.write("			// 아니면 폼 전송 수행(return true)\r\n");
      out.write("// 			if($(\"#selectBox > option\").eq(0).prop(\"selected\")) { // 선택된 경우(true)\r\n");
      out.write("// 				alert(\"항목 선택 필수!\");\r\n");
      out.write("// 				$(\"#selectBox\").focus(); // 해당 요소에 포커스\r\n");
      out.write("// 				return false; // 폼 전송 취소\r\n");
      out.write("// 			} else { // 다른 항목 선택된 경우(false)\r\n");
      out.write("// 				return true; // 폼 전송 수행\r\n");
      out.write("// 			}\r\n");
      out.write("			\r\n");
      out.write("			// selectbox 미선택, inputbox 미입력 시 폼 전송 취소 \r\n");
      out.write("			if($(\"#selectBox > option\").eq(0).prop(\"selected\")) { // 첫번째 항목 선택된 경우(true)\r\n");
      out.write("				alert(\"항목 선택 필수!\");\r\n");
      out.write("				$(\"#selectBox\").focus(); // 해당 요소에 포커스\r\n");
      out.write("				return false; // 폼 전송 취소\r\n");
      out.write("			} else if($(\"input[name=id]\").val() == \"\") { // 아이디가 미입력된 경우\r\n");
      out.write("				alert(\"아이디 입력 필수!\");\r\n");
      out.write("				$(\"input[name=id]\").focus(); // 해당 요소에 포커스\r\n");
      out.write("				return false; // 폼 전송 취소\r\n");
      out.write("			} else if($(\"input[name=passwd]\").val() == \"\") { // 패스워드가 미입력된 경우\r\n");
      out.write("				alert(\"패스워드 입력 필수!\");\r\n");
      out.write("				$(\"input[name=passwd]\").focus(); // 해당 요소에 포커스\r\n");
      out.write("				return false; // 폼 전송 취소\r\n");
      out.write("			} else {\r\n");
      out.write("				return true; // 폼 전송 수행\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>jQuery - test8.jsp</h1>\r\n");
      out.write("	<div id=\"wrap\">\r\n");
      out.write("		<form action=\"test8_result.jsp\">\r\n");
      out.write("			<div id=\"inputBox\">\r\n");
      out.write("				아이디 : <input type=\"text\" name=\"id\"><br>\r\n");
      out.write("				패스워드 : <input type=\"password\" name=\"passwd\"><br>\r\n");
      out.write("			</div>\r\n");
      out.write("			<select id=\"selectBox\" name=\"subject\">\r\n");
      out.write("				<option value=\"\">선택하세요</option>\r\n");
      out.write("				<option value=\"자바\">자바</option>\r\n");
      out.write("				<option value=\"JSP\">JSP</option>\r\n");
      out.write("				<option value=\"스프링\">스프링</option>\r\n");
      out.write("			</select>\r\n");
      out.write("			<br>\r\n");
      out.write("			<input type=\"submit\" value=\"전송\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
