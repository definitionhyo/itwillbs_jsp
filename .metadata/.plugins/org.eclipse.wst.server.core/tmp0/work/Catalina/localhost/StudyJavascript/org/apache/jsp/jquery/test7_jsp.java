/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-05-23 00:41:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test7_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"../js/jquery-3.7.0.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	/*\r\n");
      out.write("	eq(인덱스)\r\n");
      out.write("	- 선택자를 포함하여 형제자매 요소 탐색\r\n");
      out.write("	- 인덱스는 0부터 시작하며, 인덱스에 해당하는 순서에 위치한 요소를 가져옴(리턴)\r\n");
      out.write("	- 음수는 뒤에서부터 탐색\r\n");
      out.write("	\r\n");
      out.write("	attr('HTML속성명')\r\n");
      out.write("	- 선택자에서 해당 속성의 값을 가져오거나 추가\r\n");
      out.write("	- HTML 태그 속성값 자체를 가져오며 상태에 따라 변하지 않음\r\n");
      out.write("	  ex) 체크박스 checked=\"checked\" 속성값을 가져올 때 체크상태가 변해도 checked 임\r\n");
      out.write("	  \r\n");
      out.write("	prop('Javascript속성명')\r\n");
      out.write("	- 선택자에서 해당 속성의 값에 대한 상태를 가져오거나 추가\r\n");
      out.write("	- 값 자체를 다루지 않고 해당 속성의 값에 대한 true/false 리턴\r\n");
      out.write("	- attr() 함수와 유사하나 HTML 태그의 상태에 따라 결과값이 변함\r\n");
      out.write("	  ex) 체크박스 checked=\"checked\" 의 속성값을 가져올 때\r\n");
      out.write("	      체크박스 체크 시 true 리턴, 해제 시 false 리턴\r\n");
      out.write("	- HTML 속성명이 두 단어 이상의 조합일 경우 Camel-case 표기법처럼 사용\r\n");
      out.write("	  ex) HTML readonly 속성 = JAVASCRIPT readOnly 로 표기\r\n");
      out.write("	      \r\n");
      out.write("	is()\r\n");
      out.write("	- 선택자가 입력한 값과 관련된 상태 확인 후 일치 여부(true/false) 리턴\r\n");
      out.write("	- 선택자의 실행 결과나 태그 확인용\r\n");
      out.write("	- prop() 함수 리턴값을 boolean 타입으로 비교하는 것과 동일\r\n");
      out.write("	*/\r\n");
      out.write("	$(function() {\r\n");
      out.write("		// 버튼 클릭 시 이벤트 수행\r\n");
      out.write("// 		$(\"#btn\").click(function() {\r\n");
      out.write("// 			alert(\"버튼 클릭! - click()\");\r\n");
      out.write("// 		});\r\n");
      out.write("		\r\n");
      out.write("		$(\"#btn\").on(\"click\", function() {\r\n");
      out.write("// 			alert(\"버튼 클릭! - on(click)\");\r\n");
      out.write("			// -----------------------------\r\n");
      out.write("			// 선택자 요소에 eq() 함수를 사용하여 요소들 중 인덱스에 해당하는 요소 지정\r\n");
      out.write("			// => 요소 지정 후 attr() 또는 prop() 함수를 통해 해당 요소의 속성에 접근\r\n");
      out.write("			let attr1 = $(\"input[type=checkbox]\").eq(1).attr(\"checked\");\r\n");
      out.write("			// => 해당 태그에 checked 속성이 존재하므로 항상 checked \r\n");
      out.write("			let prop1 = $(\"input[type=checkbox]\").eq(1).prop(\"checked\");\r\n");
      out.write("			// => checked 속성의 체크 상태에 따라 true 또는 false\r\n");
      out.write("			//    체크되어 있으므로 기본값 true\r\n");
      out.write("			\r\n");
      out.write("			let attr2 = $(\"input[type=checkbox]\").eq(2).attr(\"checked\");\r\n");
      out.write("			// => 해당 태그에 checked 속성이 존재하지 않으므로 항상 undefined \r\n");
      out.write("			let prop2 = $(\"input[type=checkbox]\").eq(2).prop(\"checked\");\r\n");
      out.write("			// => checked 속성이 존재하지 않지만 체크 상태에 따라 true 또는 false\r\n");
      out.write("			//    체크되어 있지 않으므로 기본값 false \r\n");
      out.write("			\r\n");
      out.write("			let is1 = $(\"input[type=checkbox]\").eq(1).is(\":checked\");\r\n");
      out.write("			let is2 = $(\"input[type=checkbox]\").eq(2).is(\":checked\");\r\n");
      out.write("			\r\n");
      out.write("			// 결과 확인을 위해 id 속성값이 \"result\" 인 영역에 속성값 출력\r\n");
      out.write("			$(\"#result\").html(\r\n");
      out.write("				\"attr1 = \" + attr1 + \", prop1 = \" + prop1	\r\n");
      out.write("				+ \"<br>attr2 = \" + attr2 + \", prop2 = \" + prop2	\r\n");
      out.write("				+ \"<br>is1 = \" + is1 + \", is2 = \" + is2\r\n");
      out.write("			);\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>jQuery - test7.jsp</h1>\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th><input type=\"checkbox\" id=\"allCheck\"></th>\r\n");
      out.write("            <th>번호</th>\r\n");
      out.write("            <th>이름</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td><input type=\"checkbox\" id=\"check1\" name=\"check\" checked=\"checked\" value=\"1\"></td>\r\n");
      out.write("            <td>1</td>\r\n");
      out.write("            <td>홍길동</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td><input type=\"checkbox\" name=\"check\" value=\"2\"></td>\r\n");
      out.write("            <td>2</td>\r\n");
      out.write("            <td>이순신</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td><input type=\"checkbox\" name=\"check\" value=\"3\"></td>\r\n");
      out.write("            <td>3</td>\r\n");
      out.write("            <td>강감찬</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("        	<td colspan=\"3\">\r\n");
      out.write("        		<input type=\"button\" value=\"확인\" id=\"btn\"><br>\r\n");
      out.write("        		<div id=\"result\">결과 확인 위치</div>\r\n");
      out.write("        	</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("    </table>	\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
