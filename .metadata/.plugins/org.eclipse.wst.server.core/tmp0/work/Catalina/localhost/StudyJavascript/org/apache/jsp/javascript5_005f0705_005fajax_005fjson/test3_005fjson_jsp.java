/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-07-05 01:35:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.javascript5_005f0705_005fajax_005fjson;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test3_005fjson_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"../js/jquery-3.7.0.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function() {\r\n");
      out.write("		$(\"#btnOk\").on(\"click\", function() {\r\n");
      out.write("			/*\r\n");
      out.write("			test3_json_data.txt 파일을 AJAX 를 통해 요청\r\n");
      out.write("			- 요청 메서드 : \"GET\"\r\n");
      out.write("			- 응답 데이터 형식 : \"text\" - 기본 텍스트 형식 데이터\r\n");
      out.write("			- AJAX 요청 성공 시 자동으로 호출되는 콜백 함수를 success: 속성에 기술\r\n");
      out.write("			  (또는 $.ajax() 함수 호출 외부에 done() 함수를 연결하여 콜백 처리도 가능)\r\n");
      out.write("			  (단, success: 와 done() 은 기술 위치도 다르도 호출 순서도 다름)\r\n");
      out.write("			*/\r\n");
      out.write("// 			$.ajax({\r\n");
      out.write("// 				type: \"GET\",\r\n");
      out.write("// 				url: \"test3_json_data.txt\",\r\n");
      out.write("// 				dataType: \"text\", // 응답 데이터를 일반 텍스트 형식으로 인식\r\n");
      out.write("// 				success: function(msg) { // 요청 성공 시 호출되는 콜백 함수\r\n");
      out.write("// // 					alert(\"요청 성공!\");\r\n");
      out.write("// 					// 응답 데이터로 전달받은 msg 를 \"#resultArea\" 영역에 표시\r\n");
      out.write("// 					$(\"#resultArea\").html(msg);\r\n");
      out.write("// 				},\r\n");
      out.write("// 				error: function() { // 요청 실패 시 호출되는 콜백 함수\r\n");
      out.write("// // 					alert(\"요청 실패!\");\r\n");
      out.write("// 				}\r\n");
      out.write("// 			});\r\n");
      out.write("			// ------------\r\n");
      out.write("// 			$.ajax({\r\n");
      out.write("// 				type: \"GET\",\r\n");
      out.write("// 				url: \"test3_json_data.txt\",\r\n");
      out.write("// 				dataType: \"text\"\r\n");
      out.write("// 			}).always(function() {\r\n");
      out.write("// 				// 요청 성공/실패 여부와 관계없이 항상 실행됨(위치에 따라 호출 순서 다름)\r\n");
      out.write("// 				alert(\"항상 호출됨! - always\");\r\n");
      out.write("// 			}).done(function(msg) { // success 와 기능 동일(success 보다 호출 순서 낮음)\r\n");
      out.write("// 				alert(\"요청 성공! - done\");\r\n");
      out.write("// 				$(\"#resultArea\").html(msg);\r\n");
      out.write("// 			}).fail(function() { // error 와 기능 동일(error 보다 호출 순서 낮음)\r\n");
      out.write("// 				alert(\"요청 실패! - fail\");\r\n");
      out.write("// 			});\r\n");
      out.write("			// ================================================================\r\n");
      out.write("			// test3_json_data.txt 파일 내용 응답 데이터로 요청 시\r\n");
      out.write("			// 응답 데이터 형식을 \"JSON\" 형식으로 지정하여\r\n");
      out.write("			// JSON 객체로 인식할 수 있도록 할 수 있다!\r\n");
      out.write("			// => 응답 즉시 JSON 객체 형태로 처리 가능\r\n");
      out.write("			// => 단, 잘못된 JSON 형식의 문법이라도 일단 JSON 객체로 전달받음\r\n");
      out.write("			//    (처리 과정에서 오류 발생)\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: \"GET\",\r\n");
      out.write("				url: \"test3_json_data.txt\",\r\n");
      out.write("				dataType: \"json\" // 응답 데이터가 JSON 객체 형태로 전달되도록 지정\r\n");
      out.write("			}).done(function(data) { // success 와 기능 동일(success 보다 호출 순서 낮음)\r\n");
      out.write("// 				alert(\"요청 성공! - \" + data); // 요청 성공! - [object Object]\r\n");
      out.write("// 				$(\"#resultArea\").html(data); // 아무것도 표시되지 않음\r\n");
      out.write("				// => JSON 객체 형식(object 타입)이므로 그대로 사용 불가\r\n");
      out.write("				// -------------------------------------------------------\r\n");
      out.write("				// 만약, 전달받은 JSON 객체를 문자열 형식으로 변환할 경우\r\n");
      out.write("				// 자바스크립트의 내장 객체인 JSON 을 사용하여\r\n");
      out.write("				// JSON.stringify() 메서드를 호출하여 변환 가능(파라미터 : JSON 객체)\r\n");
      out.write("// 				$(\"#resultArea\").html(JSON.stringify(data)); \r\n");
      out.write("// 				$(\"#resultArea\").append(\"<br>\" + typeof(JSON.stringify(data))); \r\n");
      out.write("				// 출력데이터 {\"id\":\"admin\",\"name\":\"관리자\",\"age\":0}\r\n");
      out.write("				// => dataType: \"text\" 와 결과가 동일함\r\n");
      out.write("				// -------------------------------------------------------------\r\n");
      out.write("				// JSON 데이터를 객체 형태로 접근하여 테이블에 해당 데이터 출력\r\n");
      out.write("				// 1) JSON 데이터를 표시할 테이블 생성\r\n");
      out.write("				$(\"#resultArea\").html(\r\n");
      out.write("					\"<table border='1'>\"\r\n");
      out.write("					+ \"<tr>\"\r\n");
      out.write("					+ \"		<th colspan='3'>JSON 데이터 파싱 결과</th>\"\r\n");
      out.write("					+ \"</tr>\"\r\n");
      out.write("					+ \"<tr>\"\r\n");
      out.write("					+ \"		<th>아이디</th>\"\r\n");
      out.write("					+ \"		<th>이름</th>\"\r\n");
      out.write("					+ \"		<th>나이</th>\"\r\n");
      out.write("					+ \"</tr>\"\r\n");
      out.write("					+ \"</table>\"		\r\n");
      out.write("				);\r\n");
      out.write("			\r\n");
      out.write("				// 2) 응답 데이터(JSON 객체)를 처리하여 테이블에 표시\r\n");
      out.write("				// JSON 데이터가 객체(중괄호{} 로 감싸져 있음)일 경우 \r\n");
      out.write("				// 해당 객체 내의 속성들이 변수 역할을 수행하므로\r\n");
      out.write("				// AJAX 를 통해 리턴받는 객체가 저장된 변수(data)를 통해\r\n");
      out.write("				// 객체 내의 id, name, age 속성에 접근\r\n");
      out.write("				// => 자바스크립트 객체 접근 기본 문법 : 객체명.속성명(ex. data.id)\r\n");
      out.write("				// \"#resultArea\" 영역의 <table> 태그 내에 마지막 요소로 1개 행 추가\r\n");
      out.write("				$(\"#resultArea > table\").append(\r\n");
      out.write("					\"<tr>\"\r\n");
      out.write("					+ \"<td>\" + data.id + \"</td>\"\r\n");
      out.write("					+ \"<td>\" + data.name + \"</td>\"\r\n");
      out.write("					+ \"<td>\" + data.age + \"</td>\"\r\n");
      out.write("					+ \"</tr>\"\r\n");
      out.write("				);\r\n");
      out.write("			}).fail(function() { // error 와 기능 동일(error 보다 호출 순서 낮음)\r\n");
      out.write("// 				alert(\"요청 실패! - fail\");\r\n");
      out.write("			});\r\n");
      out.write("	\r\n");
      out.write("			// =================================================================\r\n");
      out.write("			// test3_json_data2.json 파일 응답데이터로 전달받는 AJAX 요청\r\n");
      out.write("			// => 전달받은 데이터를 \"#resultArea2\" 영역에 테이블 형태로 표시\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: \"GET\",\r\n");
      out.write("				url: \"test3_json_data2.json\",\r\n");
      out.write("				dataType: \"json\"\r\n");
      out.write("			}).done(function(data) {\r\n");
      out.write("				$(\"#resultArea2\").html(\r\n");
      out.write("					\"<table border='1'>\"\r\n");
      out.write("					+ \"<tr>\"\r\n");
      out.write("					+ \"		<th colspan='3'>JSON 데이터 파싱 결과</th>\"\r\n");
      out.write("					+ \"</tr>\"\r\n");
      out.write("					+ \"<tr>\"\r\n");
      out.write("					+ \"		<th>아이디</th>\"\r\n");
      out.write("					+ \"		<th>이름</th>\"\r\n");
      out.write("					+ \"		<th>나이</th>\"\r\n");
      out.write("					+ \"		<th>주소</th>\"\r\n");
      out.write("					+ \"</tr>\"\r\n");
      out.write("					+ \"</table>\"		\r\n");
      out.write("				);\r\n");
      out.write("			\r\n");
      out.write("				$(\"#resultArea2 > table\").append(\r\n");
      out.write("					\"<tr>\"\r\n");
      out.write("					+ \"<td>\" + data.id + \"</td>\"\r\n");
      out.write("					+ \"<td>\" + data.name + \"</td>\"\r\n");
      out.write("					+ \"<td>\" + data.age + \"</td>\"\r\n");
      out.write("// 					+ \"<td>\" + data.address + \"</td>\" // address 객체 내에 객체 존재하므로 object 출력됨\r\n");
      out.write("					+ \"<td>\" + data.address.address1 + \" \" + data.address.address2 + \"</td>\"\r\n");
      out.write("					+ \"</tr>\"\r\n");
      out.write("				);\r\n");
      out.write("			}).fail(function() {\r\n");
      out.write("				alert(\"요청 실패! - fail\");\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		}); // 버튼 이벤트 끝\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>test3_json.jsp - AJAX</h1>\r\n");
      out.write("	<input type=\"button\" value=\"JSON 데이터 파싱\" id=\"btnOk\">\r\n");
      out.write("	<hr>\r\n");
      out.write("	<div id=\"resultArea\"></div>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<div id=\"resultArea2\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
