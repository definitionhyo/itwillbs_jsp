/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-05-22 03:41:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test6_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"../js/jquery-3.7.0.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	/*\r\n");
      out.write("	특정 요소에 대한 조작 이벤트 - 2\r\n");
      out.write("	- 지정한 대상의 특정 위치에 내용 추가하기\r\n");
      out.write("	1. append()\r\n");
      out.write("	   - 지정한 내용을 '선택자 내부'의 '마지막'에 추가\r\n");
      out.write("	   - appendTo() 함수와 문장 구조의 차이를 제외하면 기능은 동일함\r\n");
      out.write("	   - $('선택자').append('추가할내용');\r\n");
      out.write("	     $('추가할내용').appendTo('선택자');\r\n");
      out.write("	2. prepend()\r\n");
      out.write("	   - 지정한 내용을 '선택자 내부'의 '처음'에 추가\r\n");
      out.write("	   - prependTo() 함수와 문장 구조의 차이를 제외하면 기능은 동일함\r\n");
      out.write("	   - $('선택자').prepend('추가할내용');\r\n");
      out.write("	     $('추가할내용').prependTo('선택자');\r\n");
      out.write("	3. after()\r\n");
      out.write("	   - 지정한 내용을 '선택자 요소'의 '뒤'에 삽입\r\n");
      out.write("	   - insertAfter() 함수와 문장 구조의 차이를 제외하면 기능은 동일함\r\n");
      out.write("	   - $('선택자').after('삽입할내용');\r\n");
      out.write("	     $('삽입할내용').insertAfter('선택자');\r\n");
      out.write("	4. before()\r\n");
      out.write("	   - 지정한 내용을 '선택자 요소'의 '앞'에 삽입\r\n");
      out.write("	   - insertBefore() 함수와 문장 구조의 차이를 제외하면 기능은 동일함\r\n");
      out.write("	   - $('선택자').before('삽입할내용');\r\n");
      out.write("	     $('삽입할내용').insertBefore('선택자');\r\n");
      out.write("	*/\r\n");
      out.write("	$(function() {\r\n");
      out.write("// 		$(\"#wrap_append\").append(\"<div>append() 로 삽입한 div 태그</div>\");\r\n");
      out.write("		$(\"<div>appendTo() 로 삽입한 div 태그</div>\").appendTo(\"#wrap_append\");\r\n");
      out.write("		// => \"#wrap_append\" 태그 내의 맨 마지막 위치에 div 태그 추가됨\r\n");
      out.write("		\r\n");
      out.write("// 		$(\"#wrap_prepend\").prepend(\"<div>prepend() 로 삽입한 div 태그</div>\");\r\n");
      out.write("		$(\"<div>prependTo() 로 삽입한 div 태그</div>\").prependTo(\"#wrap_prepend\");\r\n");
      out.write("		// => \"#wrap_prepend\" 태그 내의 맨 처음 위치에 div 태그 추가됨\r\n");
      out.write("		\r\n");
      out.write("// 		$(\"#wrap_after\").after(\"<div>after() 로 삽입한 div 태그</div>\");\r\n");
      out.write("		$(\"<div>insertAfter() 로 삽입한 div 태그</div>\").insertAfter(\"#wrap_after\");\r\n");
      out.write("		// => \"#wrap_after\" 태그 바깥쪽의 해당 태그 뒤에 div 태그 추가됨 \r\n");
      out.write("		\r\n");
      out.write("// 		$(\"#wrap_before\").before(\"<div>before() 로 삽입한 div 태그</div>\");\r\n");
      out.write("		$(\"<div>insertBefore() 로 삽입한 div 태그</div>\").insertBefore(\"#wrap_before\");\r\n");
      out.write("		// => \"#wrap_before\" 태그 바깥쪽의 해당 태그 앞에 div 태그 추가됨 \r\n");
      out.write("		\r\n");
      out.write("		// 결과 확인을 위해 textarea(\"ta\")에 div 태그 전체 내용 출력(태그 포함)\r\n");
      out.write("		$(\"#ta\").val($(\"#wrap\").html());\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>jQuery - test6.jsp</h1>\r\n");
      out.write("	<div id=\"wrap\">\r\n");
      out.write("		<div id=\"wrap_append\">\r\n");
      out.write("			<div>\r\n");
      out.write("				<div>div 태그1</div>\r\n");
      out.write("				<div>div 태그2</div>\r\n");
      out.write("			</div>	\r\n");
      out.write("			<!-- append() 함수에 의해 요소가 삽입될 위치 -->	\r\n");
      out.write("		</div>\r\n");
      out.write("		<hr>\r\n");
      out.write("		<div id=\"wrap_prepend\">\r\n");
      out.write("			<!-- prepend() 함수에 의해 요소가 삽입될 위치 -->	\r\n");
      out.write("			<div>\r\n");
      out.write("				<div>div 태그1</div>\r\n");
      out.write("				<div>div 태그2</div>\r\n");
      out.write("			</div>		\r\n");
      out.write("		</div>\r\n");
      out.write("		<hr>\r\n");
      out.write("		<div id=\"wrap_after\">\r\n");
      out.write("			<div>\r\n");
      out.write("				<div>div 태그1</div>\r\n");
      out.write("				<div>div 태그2</div>\r\n");
      out.write("			</div>		\r\n");
      out.write("		</div>\r\n");
      out.write("		<hr>\r\n");
      out.write("		<div id=\"wrap_before\">\r\n");
      out.write("			<div>\r\n");
      out.write("				<div>div 태그1</div>\r\n");
      out.write("				<div>div 태그2</div>\r\n");
      out.write("			</div>		\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>	\r\n");
      out.write("	<!-- 결과 확인을 위한 태그 출력용 textarea -->\r\n");
      out.write("	<textarea id=\"ta\" rows=\"20\" cols=\"100\"></textarea>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
