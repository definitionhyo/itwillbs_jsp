/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-07-11 07:27:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.javascript5_005f0626_005fajax;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"../js/jquery-3.7.0.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	/*\r\n");
      out.write("	AJAX(Asyncronous Javascript And XML, 비동기식 자바스크립트 & XML)\r\n");
      out.write("	- 웹페이지(브라우저)의 갱신 없이도 화면 상의 요소를 다룰 수 있는 \r\n");
      out.write("	  자바스크립트(jQuery) 라이브러리\r\n");
      out.write("	- 데이터베이스 등의 작업 요청 시 요청에 대한 응답이 돌아올 때 까지 기다리지 않고\r\n");
      out.write("	  다른 작업을 수행하면서 요청에 대한 응답이 돌아오면 해당 응답을 처리하는 기술\r\n");
      out.write("	- 주로, 아이디 검증 또는 페이지 무한스크롤 등의 작업에 활용\r\n");
      out.write("	\r\n");
      out.write("	< 기본 문법 >\r\n");
      out.write("	$.ajax({});\r\n");
      out.write("	*/\r\n");
      out.write("	$(function() {\r\n");
      out.write("		// id 선택자 btnLogin 버튼 클릭 시 동작 이벤트에 대한 익명 함수 정의\r\n");
      out.write("		$(\"#btnLogin\").on(\"click\", function() {\r\n");
      out.write("			// AJAX 를 사용하여 POST 방식 요청으로 test1_result_ajax.jsp 페이지를 요청\r\n");
      out.write("			// 이 때, 요청 페이지로 전달할 파라미터 : 입력받은 아이디, 패스워드\r\n");
      out.write("			// 리턴되는 응답데이터를 id 선택자 resultArea 에 출력\r\n");
      out.write("			// -----------------------------------------------------------\r\n");
      out.write("			// 폼 내부의 파라미터를 모두 요청 페이지로 전송하기 위해\r\n");
      out.write("			// 폼을 대상으로 serialize() 메서드를 호출 시 해당 폼의 데이터 직렬화\r\n");
      out.write("			// => 폼 파라미터 데이터를 모두 내보내기(= 가져오기 가능)\r\n");
      out.write("			let sendData = $(\"form\").serialize();\r\n");
      out.write("// 			alert(sendData);\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				// AJAX 요청 및 응답 처리에 사용할 데이터를 속성명:\"값\" 형태로 지정(순서 무관)\r\n");
      out.write("				type: \"POST\", // 요청 방식(Method)\r\n");
      out.write("				url: \"test1_result_ajax.jsp\", // 요청 URL\r\n");
      out.write("// 				data: {\r\n");
      out.write("// 					// 복수개의 파라미터 전달 시 파라미터명:데이터 형식으로 전달\r\n");
      out.write("// // 					id: \"admin\",\r\n");
      out.write("// // 					passwd: \"1234\"\r\n");
      out.write("					\r\n");
      out.write("// 					// 특정 입력 항목의 값을 가져와서 전달할 경우 $(\"선택자\").val()\r\n");
      out.write("// // 					id: $(\"#id\").val(),\r\n");
      out.write("// // 					passwd: $(\"#passwd\").val()\r\n");
      out.write("// 				},\r\n");
      out.write("				// serialize() 메서드를 통해 가져온 폼 데이터를 전송할 데이터로 지정(중괄호 불필요)\r\n");
      out.write("				data: sendData, // $(\"form\").serialize() 와 동일\r\n");
      out.write("				dataType: \"text\", // 응답 데이터 타입\r\n");
      out.write("				success: function(msg) { // 요청 응답(성공) 시 수행할 함수 정의(= 콜백 함수)\r\n");
      out.write("					// 요청 성공 시 응답 페이지의 내용이 익명 함수 파라미터(msg)로 전달되므로\r\n");
      out.write("					// 해당 파라미터를 사용하여 응답 데이터 접근 가능\r\n");
      out.write("// 					$(\"#resultArea\").html(msg);\r\n");
      out.write("					$(\"#resultArea\").text(msg);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div align=\"center\">\r\n");
      out.write("		<h1>로그인</h1>\r\n");
      out.write("		<form action=\"test1_result.jsp\" method=\"get\">\r\n");
      out.write("			<input type=\"text\" placeholder=\"아이디\" name=\"id\" id=\"id\"><br>\r\n");
      out.write("			<input type=\"password\" placeholder=\"패스워드\" name=\"passwd\" id=\"passwd\"><br>\r\n");
      out.write("<!-- 			<input type=\"submit\" id=\"btnLogin\" value=\"로그인\"> -->\r\n");
      out.write("			<input type=\"button\" id=\"btnLogin\" value=\"로그인\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<div id=\"resultArea\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
