/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-05-23 02:50:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test10_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"../js/jquery-3.7.0.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function() {\r\n");
      out.write("		// each() 메서드 : 대상에 대한 반복을 수행\r\n");
      out.write("		// => 지정 가능한 대상 : 태그, 배열 등의 객체\r\n");
      out.write("		// => 기본 문법 : $(\"선택자\").each(function(index, item) {})\r\n");
      out.write("		//                $.each(객체, function(index, item) {})\r\n");
      out.write("		//                => index : 대상의 인덱스, item : 대상 요소\r\n");
      out.write("		$(\"h3\").each(function(index, item) {\r\n");
      out.write("			// resultArea 영역에 index 와 item 값 출력\r\n");
      out.write("			// => 주의! div 태그 내의 마지막에 항목들이 추가되어야 하므로 append() 사용\r\n");
      out.write("// 			$(\"#resultArea\").append(index + \" : \" + item + \"<br>\");\r\n");
      out.write("			\r\n");
      out.write("// 			$(\"#resultArea\").append(index + \" : \" + item.html() + \"<br>\");\r\n");
      out.write("			// => item 항목은 자바스크립트 객체이므로 jQuery 함수(메서드) 호출 불가!\r\n");
      out.write("			//    따라서, 선택자 지정을 통해 item 요소를 감싸 jQuery 객체로 표현해야함\r\n");
      out.write("// 			$(\"#resultArea\").append(index + \" : \" + $(item).html() + \"<br>\");\r\n");
      out.write("			// 또는 $(this) 형식으로 객체 지정 시 동일한 결과\r\n");
      out.write("// 			$(\"#resultArea\").append(index + \" : \" + $(this).html() + \"!<br>\");\r\n");
      out.write("			// ---------------------------------------------\r\n");
      out.write("			// table 태그 내에 각 항목 출력\r\n");
      out.write("			// => 기존 행(tr 태그)보다 아래쪽에 출력해야하므로 append() 사용\r\n");
      out.write("			// => tr 태그와 td 태그 및 출력 항목을 차례대로 기술하여 추가\r\n");
      out.write("// 			$(\"table\").append(\"<tr><td>\" + index + \"</td></tr>\");\r\n");
      out.write("			// => 주의! 테이블이 복수개이므로 각 테이블 모두 데이터 출력됨\r\n");
      out.write("			\r\n");
      out.write("			// table 태그 중 첫번째 테이블 내의 가장 마지막 요소로 index 값 출력\r\n");
      out.write("			$(\"table\").eq(0).append(\"<tr><td>\" + index + \"</td></tr>\");\r\n");
      out.write("			\r\n");
      out.write("			// table 태그 중 두번째 테이블 내의 가장 마지막 요소로 index, item 값 출력\r\n");
      out.write("			// => 단, item 에 해당하는 요소의 텍스트만 추출하여 출력\r\n");
      out.write("// 			$(\"table\").eq(1).append(\r\n");
      out.write("// 					\"<tr><td>\" + index + \"</td><td>\" + $(item).text() + \"</td></tr>\");\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 배열을 활용하여 반복문을 수행할 경우\r\n");
      out.write("		let arr = [\r\n");
      out.write("			{no:\"1번\", name:\"홍길동\"}, // 객체1\r\n");
      out.write("			{no:\"2번\", name:\"이순신\"}, // 객체2\r\n");
      out.write("			{no:\"3번\", name:\"강감찬\"}  // 객체3\r\n");
      out.write("		];\r\n");
      out.write("		\r\n");
      out.write("		// 배열은 별도의 선택자가 제공되지 않으므로 $.each() 형식으로 호출 후\r\n");
      out.write("		// 파라미터로 배열, 익명함수를 전달\r\n");
      out.write("		$.each(arr, function(index, item) {\r\n");
      out.write("			// 배열 크기만큼 자동으로 반복하면서 배열의 각 요소에 접근\r\n");
      out.write("			// => 배열 내의 요소가 객체이므로 객체명(item)을 통해 값에 접근 가능\r\n");
      out.write("			$(\"table\").eq(1).append(\r\n");
      out.write("					\"<tr><td>\" + item.no + \"</td><td>\" + item.name + \"</td></tr>\");\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>jQuery - test10.jsp</h1>\r\n");
      out.write("	<h3>item 1</h3>\r\n");
      out.write("	<h3>item 2</h3>\r\n");
      out.write("	<h3>item 3</h3>\r\n");
      out.write("	<div id=\"resultArea\"></div>\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("		<tr><td>번호</td></tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>번호</td>\r\n");
      out.write("			<td>항목</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
