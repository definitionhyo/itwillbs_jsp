package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import db.JdbcUtil;
import vo.MemberBean;

// 실제 비즈니스 로직을 수행하는 MemberDAO 클래스 정의
// => 각 Service 클래스 인스턴스에서 MemberDAO 인스턴스에 접근 시 고유 데이터가 불필요하므로
//    MemberDAO 인스턴스는 애플리케이션에서 단 하나만 생성하여 공유해도 된다!
//    따라서, 싱글톤 디자인 패턴을 적용하여 클래스를 정의하면
//    하나의 인스턴스를 모두가 공유하므로 메모리 낭비를 최소화 할 수 있다!
public class MemberDAO {
	private MemberDAO() {}
	
	private static MemberDAO instance = new MemberDAO();

	public static MemberDAO getInstance() {
		return instance;
	}
	
	private Connection con;

	public setConnection(Connection con) {
		this.con = con;
	}
	
	public int insertMember(MemberBean member) {
		System.out.println("MemberDAO - insertMember()");
		int insertCount = 0;
		
		PreparedStatement pstmt = null;
		
		String str = "Insert into member values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?, now())";
		try {
			pstmt = con.prepareStatement(str);
			pstmt.setString(1, member.getName());
			pstmt.setString(2, member.getId());
			pstmt.setString(3, member.getPasswd());
			pstmt.setString(4, member.getJumin());
			pstmt.setString(5, member.getEmail());
			pstmt.setString(6, member.getJob());
			pstmt.setString(7, member.getGender());
			pstmt.setString(8, member.getHobby());
			pstmt.setString(9, member.getMotivation());
			
			insertCount = pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("insertCount 구문 오류");
			e.printStackTrace();
		} finally {
			JdbcUtil.close(pstmt);
		}
		
			
		
		return insertCount;
	}
	
	
	
	
}


















