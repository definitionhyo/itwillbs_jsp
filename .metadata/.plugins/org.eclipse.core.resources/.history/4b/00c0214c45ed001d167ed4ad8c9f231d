package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import db.JdbcUtil;
import vo.MemberBean;

public class MemberDAO {
	private MemberDAO() {}
	
	private static MemberDAO instance = new MemberDAO();
	
	public static MemberDAO getInstance() {
		return instance;
	}
	private Connection con;

	public void setConnection(Connection con) {
		this.con = con;
	}
	public int insertMember(MemberBean member) {
		System.out.println("MemberDAO - insertMember()");
		
		int insertCount = 0;
		
		PreparedStatement pstmt = null;
		
		try {
			// 3단계. SQL 구문 작성 및 전달
			// member 테이블에 모든 데이터 추가 - INSERT
			// => 번호(idx)는 자동 증가 컬럼이므로 null 값 전달
			// => 가입일(hire_date)은 DB 서버의 현재 날짜 활용(now() 함수 호출)
			String sql = "INSERT INTO member VALUES (null,?,?,?,?,?,?,?,?,?,now())";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, member.getName());
			pstmt.setString(2, member.getId());
			pstmt.setString(3, member.getPasswd());
			pstmt.setString(4, member.getJumin());
			pstmt.setString(5, member.getEmail());
			pstmt.setString(6, member.getJob());
			pstmt.setString(7, member.getGender());
			pstmt.setString(8, member.getHobby());
			pstmt.setString(9, member.getMotivation());
			
			System.out.println(pstmt);
			
			// 4단계. SQL 구문 실행 및 결과 처리
			insertCount = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			System.out.println("INSERT 구문 오류 발생! - insertMember()");
			e.printStackTrace();
		} finally {
			// DB 자원 반환
			// 단!! Connection 객체는 반환하지 않도록 주의! (Service 에서 반환하기 때문)
			JdbcUtil.close(pstmt);
		}
		
		// INSERT 작업 결과 리턴
		return insertCount; // => MemberJoinProService 로 리턴
	}
	
	// 로그인을 위한 아이디, 패스워드 조회 작업 수행 - SELECT
	public boolean selectCorrectUser(MemberBean member) {
		boolean isCorrectUser = false;
		
		// DB 작업에 필요한 변수 선언
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			// 입력받은 아이디와 패스워드가 일치하는 레코드 검색 - SELECT
			String sql = "SELECT * FROM member WHERE id = ? AND passwd = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, member.getId());
			pstmt.setString(2, member.getPasswd());
			
			rs = pstmt.executeQuery();
			
			// 조회 결과가 있을 경우(= 로그인 성공) isCorrectUser 를 true 로 변경
			if(rs.next()) {
				isCorrectUser = true;
			}
		} catch (SQLException e) {
			System.out.println("SQL 구문 오류 - selectCorrectUser()");
			e.printStackTrace();
		} finally {
			// DB 자원 반환
			// 단!! Connection 객체는 반환하지 않도록 주의! (Service 에서 반환하기 때문)
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
		}
		
		return isCorrectUser;
	}
	
	// 회원 정보 조회 작업 - SELECT
	public MemberBean selectMember(String id) {
		MemberBean member = null;
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			// 아이디에 해당하는 레코드 조회 - SELECT
			// => 조회 결과를 MemberBean 객체에 저장 후 리턴
			String sql = "SELECT * FROM member WHERE id = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, id);
			
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				member = new MemberBean();
				member.setIdx(rs.getInt("idx"));
				member.setName(rs.getString("name"));
				member.setId(rs.getString("id"));
//				member.setPasswd(rs.getString("passwd")); // 불필요하므로 생략
				member.setJumin(rs.getString("jumin"));
				member.setEmail(rs.getString("email"));
				member.setJob(rs.getString("job"));
				member.setGender(rs.getString("gender"));
				member.setHobby(rs.getString("hobby"));
				member.setMotivation(rs.getString("motivation"));
				member.setHire_date(rs.getDate("hire_date"));
//				System.out.println(member);
			}
		} catch (SQLException e) {
			System.out.println("SQL 구문 오류 - selectMember()");
			e.printStackTrace();
		} finally {
			// DB 자원 반환
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
		}
		
		return member;
	}
	
	// 전체 회원 목록 조회 - SELECT
	public List<MemberBean> selectMemberList() {
		List<MemberBean> memberList = null;
		
		// 전체 회원 목록 조회
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			// member 테이블의 모든 레코드 조회 - SELECT
			// => 조회 결과를 반복하면서 1개 레코드 -> MemberBean 저장하고,
			//    각 MemberBean 객체를 List 객체에 추가
			String sql = "SELECT * FROM member";
			pstmt = con.prepareStatement(sql);
			
			rs = pstmt.executeQuery();
			
			// 전체 회원 목록을 저장할 List 객체 생성
			memberList = new ArrayList<MemberBean>();
			
			while(rs.next()) {
				MemberBean member = new MemberBean();
				member.setIdx(rs.getInt("idx"));
				member.setName(rs.getString("name"));
				member.setId(rs.getString("id"));
//				member.setPasswd(rs.getString("passwd")); // 불필요하므로 생략
				member.setJumin(rs.getString("jumin"));
				member.setEmail(rs.getString("email"));
				member.setJob(rs.getString("job"));
				member.setGender(rs.getString("gender"));
				member.setHobby(rs.getString("hobby"));
				member.setMotivation(rs.getString("motivation"));
				member.setHire_date(rs.getDate("hire_date"));
//				System.out.println(member);
				
				// 1개 레코드를 List 객체에 추가
				memberList.add(member);
			}
		} catch (SQLException e) {
			System.out.println("SQL 구문 오류 - selectMember()");
			e.printStackTrace();
		} finally {
			// DB 자원 반환
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
		}
		
		return memberList;
	}
	
	
}














