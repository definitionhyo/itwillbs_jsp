package jsp08_jdbc;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/jsp08_jdbc/JdbcConnect3_SELECT")
public class JdbcConnect3SelectServlet extends HttpServlet {
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("JdbcConnect3SelectServlet");
		
		try {
			// 1단계. JDBC 드라이버 로드
			Class.forName("com.mysql.cj.jdbc.Driver");
			System.out.println("드라이버 로드 성공!");
			
			// 2단계. DB 연결
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/study_jsp5", "root", "1234");
			System.out.println("DB 연결 성공!");
			
			// 3단계. SQL 구문 작성 및 전달
			// jsp08_student 테이블의 모든 레코드 검색 - SELECT
			String sql = "SELECT * FROM jsp08_student";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			// 4단계. SQL 구문 실행 및 결과 처리
			// => PreparedStatement 객체의 executeQuery() 메서드를 호출하여
			//    SELECT 구문 실행 후 리턴되는 결과값을 java.sql.ResultSet 타입으로 저장
			ResultSet rs = pstmt.executeQuery();
			/*
			 SELECT 구문 성공 시 다음 형태의 테이블이 ResultSet 타입 객체로 리턴됨
			 조회 결과 테이블의 특정 레코드를 가리키는 포인터 역할을 커서(Cursor)라고 함
	         (커서가 위치한 레코드의 데이터(컬럼)에만 접근이 가능함)
	         => 커서를 아래쪽으로 한 줄씩 이동하면서 각 레코드에 접근해야함
	         => ResultSet 객체의 next() 메서드를 호출하여 커서를 다음 레코드로 이동시킴
	            이 때, 다음 레코드가 존재하면 true 리턴, 존재하지 않으면 false 리턴
		     +------+--------+
		     | idx  | name   | <- 현재 커서(Cursor) 위치(항상 첫번째 레코드 위에 위치)
		     +------+--------+
		     |    1 | 홍길동 | <- rs.next() 한 번 호출 시 커서 위치(레코드 있음 = true)
		     |    2 | 이순신 | <- rs.next() 두 번 호출 시 커서 위치(레코드 있음 = true)
		     +------+--------+ <- rs.next() 세 번 호출 시 커서 위치(레코드 없음 = false)
			 */
			
			// ResultSet 객체의 next() 메서드를 호출하여 커서를 다음레코드로 이동시키기
			// => 레코드가 2개이므로 rs.next() 메서드를 두 번 호출할 동안 true 리턴되고,
			//    세 번째 호출 시 false 리턴됨
//			System.out.println(rs.next()); // true(레코드 있음)
//			System.out.println(rs.next()); // true(레코드 있음)
//			System.out.println(rs.next()); // false(레코드 없음)
			
			// ResultSet 객체의 getXXX() 메서드를 호출하여 
			// 현재 접근한 레코드의 특정 컬럼 데이터 가져오기(rs.next() 선행되어야함)
			// => 이 때, getXXX() 메서드의 XXX 은 가져올 컬럼의 자바 데이터타입명을 지정
			//    (ex. 문자데이터(VARCHAR) 가 저장된 컬럼 : getString(), 정수 데이터 컬럼 : getInt())
			// => getXXX() 메서드 파라미터는 컬럼의 인덱스번호(정수 1부터 시작) 
			//    또는 컬럼명(String)을 지정
			//    (ex. 문자데이터 저장된 두번째 컬럼(컬럼명 : name) : getString(2) 또는 getString("name")
			rs.next(); // 첫번째 레코드로 커서 이동
			
			// 첫번째 레코드의 첫번째 컬럼데이터(정수), 두번째 컬럼데이터(문자열) 가져오기
//			System.out.println("컬럼인덱스로 접근 : " + rs.getInt(1) + ", " + rs.getString(2));
			// 주의! 컬럼인덱스 번호 잘못 지정 시 SQLException 예외 발생
			// (java.sql.SQLException: Column Index out of range, 3 > 2. )
//			System.out.println("컬럼인덱스로 접근 : " + rs.getInt(3) + ", " + rs.getString(2));
			
			// 첫번째 레코드의 "idx" 컬럼(정수), "name" 컬럼(문자열) 가져오기
//			System.out.println("컬럼명으로 접근 : " + rs.getInt("idx") + ", " + rs.getString("name"));
			// 주의! 컬럼명 잘못 지정 시 SQLException 예외 발생
			// (java.sql.SQLException: Column 'idxxx' not found.)
//			System.out.println("컬럼명으로 접근 : " + rs.getInt("idxxx") + ", " + rs.getString("name"));
			
			System.out.println("첫번째 레코드 : " + rs.getInt("idx") + ", " + rs.getString("name"));
			
			// 다음 레코드의 데이터에 접근하려면 다시 rs.next() 메서드 호출 필수!
			rs.next();
			System.out.println("두번째 레코드 : " + rs.getInt("idx") + ", " + rs.getString("name"));
			
			rs.next();
			System.out.println("세번째 레코드 : " + rs.getInt("idx") + ", " + rs.getString("name"));
			// => 주의! 세번째 레코드는 존재하지 않으므로 rs.next() 메서드 호출 후
			//    해당 레코드에 접근하려할 경우 예외 발생
			//    (java.sql.SQLException: After end of result set)
		} catch (ClassNotFoundException e) {
			System.out.println("드라이버 로드 실패!");
			e.printStackTrace();
		} catch (SQLException e) {
			System.out.println("DB 연결 실패!");
			e.printStackTrace();
		}
	}

}







