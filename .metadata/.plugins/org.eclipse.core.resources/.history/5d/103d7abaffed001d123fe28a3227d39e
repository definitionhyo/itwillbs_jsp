package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import db.JdbcUtil;
import vo.BoardBean;

public class BoardDAO {
	// -----------------------------------------------
	// 싱글톤 패턴을 활용한 인스턴스 관리
	private static BoardDAO instance = new BoardDAO();
	
	private BoardDAO() {}

	public static BoardDAO getInstance() {
		return instance;
	}
	// -----------------------------------------------
	// 외부로부터 Connection 객체를 전달받아 관리
	private Connection con;

	public void setConnection(Connection con) {
		this.con = con;
	}
	// -----------------------------------------------
	// 글쓰기
	public int insertBoard(BoardBean board) {
		// 작업 처리 결과를 리턴받아 저장할 변수 선언
		int insertCount = 0;
		
		// DB 작업에 필요한 변수 선언
		PreparedStatement pstmt = null, pstmt2 = null;
		ResultSet rs = null;
		
		try {
			// 새 글 번호 계산을 위해 기존 board 테이블의 번호(board_num) 중 가장 큰 번호 조회
			// => MySQL 구문의 MAX() 함수 사용(SELECT MAX(컬럼명) FROM 테이블명)
			// => 조회 결과가 있을 경우 조회 결과 + 1 값을 새 글 번호로 지정
			//    (단, 조회 결과가 없을 경우 기본값 1 로 지정)
			int board_num = 1; // 새 글 번호(기본값 1)
			
			String sql = "SELECT MAX(board_num) FROM board";
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			if(rs.next()) { // 조회 결과가 있을 경우
				// 기존 게시물이 하나라도 존재할 경우 가장 큰 번호 리턴 + 1 값을 저장
				// 만약, 게시물이 하나도 없을 경우 0 리턴 + 1 값을 저장
				board_num = rs.getInt(1) + 1;
			} 
			// ----------------------------------------------------------------------
			// 전달받은 데이터(BoardBean 객체)를 사용하여 INSERT 작업 수행
			// => 참조글번호(board_re_ref)는 새 글 번호와 동일한 번호로 지정
			// => 들여쓰기레벨(board_re_lev)과 순서번호(board_re_seq)는 0으로 지정
			// => 조회수(board_readcount)는 0 으로 지정
			// => 작성일자는 now() 함수 사용
			sql = "INSERT INTO board VALUES (?,?,?,?,?,?,?,?,?,?,?,now())";
			pstmt2 = con.prepareStatement(sql);
			pstmt2.setInt(1, board_num); // 글번호(계산된 새 글 번호 사용)
			pstmt2.setString(2, board.getBoard_name()); // 작성자
			pstmt2.setString(3, board.getBoard_pass()); // 패스워드
			pstmt2.setString(4, board.getBoard_subject()); // 제목
			pstmt2.setString(5, board.getBoard_content()); // 내용
			pstmt2.setString(6, board.getBoard_file()); // 원본파일명
			pstmt2.setString(7, board.getBoard_real_file()); // 실제파일명
			pstmt2.setInt(8, board_num); // 참조글번호(글쓰기 과정은 글번호와 동일)
			pstmt2.setInt(9, 0); // 들여쓰기레벨
			pstmt2.setInt(10, 0); // 순서번호
			pstmt2.setInt(11, 0); // 조회수
			
			insertCount = pstmt2.executeUpdate();
			
		} catch (SQLException e) {
			System.out.println("SQL 구문 오류 - insertBoard()");
			e.printStackTrace();
		} finally {
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
			JdbcUtil.close(pstmt2);
		}
		
		return insertCount;
	}

	// 전체 글 목록 조회
	public List<BoardBean> selectBoardList() {
		List<BoardBean> boardList = null;
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			// board 테이블의 모든 레코드 조회
			// => 정렬 기준 : 
			String sql = "SELECT * FROM board";
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			// 전체 글목록 저장할 객체 생성
			boardList = new ArrayList<BoardBean>();
			
			while(rs.next()) {
				// 1개 글 정보를 저장할 객체 생성 및 데이터 저장
				BoardBean board = new BoardBean();
				board.setBoard_num(rs.getInt("board_num"));
				board.setBoard_name(rs.getString("board_name"));
//				board.setBoard_pass(rs.getString("board_pass")); // 생략 가능
				board.setBoard_subject(rs.getString("board_subject"));
				board.setBoard_content(rs.getString("board_content"));
				board.setBoard_file(rs.getString("board_file"));
				board.setBoard_real_file(rs.getString("board_real_file"));
				board.setBoard_re_ref(rs.getInt("board_re_ref"));
				board.setBoard_re_lev(rs.getInt("board_re_lev"));
				board.setBoard_re_seq(rs.getInt("board_re_seq"));
				board.setBoard_readcount(rs.getInt("board_readcount"));
				board.setBoard_date(rs.getTimestamp("board_date"));
				
				// 1개 게시물 정보를 List 객체에 추가
				boardList.add(board);
			}
		} catch (SQLException e) {
			System.out.println("SQL 구문 오류 - selectBoardList()");
			e.printStackTrace();
		} finally {
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
		}
		
		return boardList;
	}
	
	
	
}












