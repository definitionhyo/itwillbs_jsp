package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import db.JdbcUtil;
import vo.BoardBean;

public class BoardDAO {
	private BoardDAO() {
	}

	private static BoardDAO instance = new BoardDAO();

	public static BoardDAO getInstance() {
		return instance;
	}

	private Connection con;

	public void setConnection(Connection con) {
		this.con = con;
	}

	public int insertBoard(BoardBean board) {
		System.out.println("insertBoardDao");
		int insertCount = 0;

		PreparedStatement pstmt = null, pstmt2 = null;
		ResultSet rs = null;

		try {
			int board_num = 1;

			String sql = "select max(board_num) from board";
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				board_num = rs.getInt(1) + 1;
			}

			sql = "insert into board values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, now())";
			pstmt2 = con.prepareStatement(sql);
			pstmt2.setInt(1, board_num);
			pstmt2.setString(2, board.getBoard_name());
			pstmt2.setString(3, board.getBoard_pass());
			pstmt2.setString(4, board.getBoard_subject());
			pstmt2.setString(5, board.getBoard_content());
			pstmt2.setString(6, board.getBoard_file());
			pstmt2.setString(7, board.getBoard_real_file());
			pstmt2.setInt(8, board_num);
			pstmt2.setInt(9, 0);
			pstmt2.setInt(10, 0);
			pstmt2.setInt(11, 0);
//			System.out.println(pstmt);

			insertCount = pstmt2.executeUpdate();

		} catch (SQLException e) {
			System.out.println("SQL 구문 오류 - insertBoard()");
			e.printStackTrace();
		} finally {
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
			JdbcUtil.close(pstmt2);
		}

		return insertCount;
	}

	public List<BoardBean> selectBoardList(int startRow, int listLimit) {
		System.out.println("getBoardList()");
		List<BoardBean> boardList = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			String sql = "select * from board order by board_re_ref desc, board_re_seq asc LIMIT ?,?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, startRow);
			pstmt.setInt(2, listLimit);
			rs = pstmt.executeQuery();

			boardList = new ArrayList<BoardBean>();
			while (rs.next()) {
				BoardBean board = new BoardBean();
				board.setBoard_num(rs.getInt("board_num"));
				board.setBoard_name(rs.getString("board_name"));
//				board.setBoard_pass(rs.getString("board_pass"));  //생략가능
				board.setBoard_subject(rs.getString("board_subject"));
				board.setBoard_content(rs.getString("board_content"));
				board.setBoard_file(rs.getString("board_file"));
				board.setBoard_real_file(rs.getString("board_real_file"));
				board.setBoard_re_lev(rs.getInt("board_re_lev"));
				board.setBoard_re_ref(rs.getInt("board_re_ref"));
				board.setBoard_re_seq(rs.getInt("board_re_seq"));
				board.setBoard_date(rs.getTimestamp("board_date"));

				boardList.add(board);
			}
		} catch (SQLException e) {
			System.out.println("SQL구문 오류 - selectBoardList()");
			e.printStackTrace();
		} finally {
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
		}

		return boardList; // BoardListService 리턴
	}

	public int selectBoardListCount() {
		System.out.println("selectBoardListCount()");
		int listCount = 0;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			String sql = "select count(*) from board";
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				listCount = rs.getInt(1);
			}

		} catch (SQLException e) {
			System.out.println("SQL구문 오류 - selectBoardListCount()");
			e.printStackTrace();
		} finally {
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
		}

		return listCount; // BoardListService 리턴
	}

	public BoardBean selectBoard(int board_num) {
		BoardBean board = null;

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			// 글번호에 해당하는 레코드 검색 - SELECT
			String sql = "SELECT * FROM board WHERE board_num = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, board_num);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				// 1개 글 정보를 저장할 객체 생성 및 데이터 저장
				board = new BoardBean();
				board.setBoard_num(rs.getInt("board_num"));
				board.setBoard_name(rs.getString("board_name"));
//				board.setBoard_pass(rs.getString("board_pass")); // 생략 가능
				board.setBoard_subject(rs.getString("board_subject"));
				board.setBoard_content(rs.getString("board_content"));
				board.setBoard_file(rs.getString("board_file"));
				board.setBoard_real_file(rs.getString("board_real_file"));
				board.setBoard_re_ref(rs.getInt("board_re_ref"));
				board.setBoard_re_lev(rs.getInt("board_re_lev"));
				board.setBoard_re_seq(rs.getInt("board_re_seq"));
				board.setBoard_readcount(rs.getInt("board_readcount"));
				board.setBoard_date(rs.getTimestamp("board_date"));
			}
		} catch (SQLException e) {
			System.out.println("SQL 구문 오류 - selectBoard()");
			e.printStackTrace();
		} finally {
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
		}

		return board;
	}

	public int updateReadcount(int board_num) {
		System.out.println("updateReadcount()");
		int updateCount = 0;

		PreparedStatement pstmt = null;

		try {
			String sql = "update board set board_readcount = board_readcount + 1 where board_num = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, board_num);
			updateCount = pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("SQL 구문 오류 - updateReadcount()");
			e.printStackTrace();
		} finally {
			JdbcUtil.close(pstmt);
		}

		return updateCount;
	}

	public boolean selectBoardWriter(int board_num, String board_pass) {
		boolean isBoardWriter = false;

		PreparedStatement pstmt = null, pstmt2 = null;
		ResultSet rs = null;

		try {
			String sql = "select * from board where board_num ? and board_pass = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, board_num);
			pstmt.setString(2, board_pass);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				isBoardWriter = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
		}

		return isBoardWriter;
	}

	public int deleteBoard() {
		int deleteCount = 0;
		
		
		
		
		return deleteCount;
	}

}













