package controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import action.Action;
import action.MemberInfoAction;
import action.MemberJoinProAction;
import action.MemberLoginProAction;
import action.MemberLogoutAction;
import vo.ActionForward;

@WebServlet("*.me")
public class MemberFrontController extends HttpServlet {

	protected void doProcess(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("MemberFrontController");
		
		request.setCharacterEncoding("UTF-8");
		
		Action action = null; // XXXAction 클래스 인스턴스 관리(업캐스팅 할 부모타입)
		ActionForward forward = null; // 포워딩 정보 관리
		
		String command = request.getServletPath();
		System.out.println("command : " + command); // "/XXX.me"
		
		if(command.equals("/MemberJoinForm.me")) {
			forward = new ActionForward();
			forward.setPath("member/member_join_form.jsp");
			forward.setRedirect(false); // 생략도 가능(boolean 타입 기본값이 false)
		} else if(command.equals("/MemberJoinPro.me")) {
			action = new MemberJoinProAction(); // MemberJoinProAction -> Action 업캐스팅
			forward = action.execute(request, response);
		} else if(command.equals("/MemberLoginForm.me")) {
			forward = new ActionForward();
			forward.setPath("member/member_login_form.jsp");
			forward.setRedirect(false);
		} else if(command.equals("/MemberLoginPro.me")) {
			action = new MemberLoginProAction();
			forward = action.execute(request, response);
		} else if(command.equals("/MemberLogout.me")) {
			action = new MemberLogoutAction();
			forward = action.execute(request, response);
		} else if(command.equals("/MemberInfo.me")) {
			action = new MemberInfoAction();
			forward = action.execute(request, response);
		} else if(command.equals("/MemberInfo.me")) {
			action = new MemberInfoAction();
			forward = action.execute(request, response);
		}
		
		
		
		
		if(forward != null) {
			if(forward.isRedirect()) { // Redirect 방식
				System.out.println("Redirect!");
				response.sendRedirect(forward.getPath());
			} else { // Dispatch 방식
				System.out.println("Dispatch!");
				RequestDispatcher dispatcher = 
						request.getRequestDispatcher(forward.getPath());
				dispatcher.forward(request, response);
			}
		}
		
		
	}
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doProcess(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doProcess(request, response);
	}

}














